{"version":3,"file":"image-masonry-litelement.js","sources":["../../node_modules/lit-html/lib/directive.js","../../node_modules/lit-html/lib/dom.js","../../node_modules/lit-html/lib/part.js","../../node_modules/lit-html/lib/template.js","../../node_modules/lit-html/lib/template-instance.js","../../node_modules/lit-html/lib/template-result.js","../../node_modules/lit-html/lib/parts.js","../../node_modules/lit-html/lib/default-template-processor.js","../../node_modules/lit-html/lib/template-factory.js","../../node_modules/lit-html/lib/render.js","../../node_modules/lit-html/lit-html.js","../../node_modules/lit-html/lib/modify-template.js","../../node_modules/lit-html/lib/shady-render.js","../../node_modules/lit-element/lib/updating-element.js","../../node_modules/lit-element/lib/css-tag.js","../../node_modules/lit-element/lit-element.js","../../src/common/dijkstra.js","../../src/common/utils.js","../../src/common/justified-layout.js","../../node_modules/element-resize-event/index.js","../../src/litelement/lazy-image.js","../../src/common/when-element-visible.js","../../src/litelement/image-masonry.js","../src/images.js","../src/litelement/basic.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (scopeName, renderedDOM, template) => {\n    shadyRenderSet.add(scopeName);\n    // If `renderedDOM` is stamped from a Template, then we need to edit that\n    // Template's underlying template element. Otherwise, we create one here\n    // to give to ShadyCSS, which still requires one while scoping.\n    const templateElement = !!template ? template.element : document.createElement('template');\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = templateElement.content;\n    if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    }\n    else {\n        content.insertBefore(condensedStyle, content.firstChild);\n    }\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n    }\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(scopeName, renderContainer, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (!superCtor.hasOwnProperty(finalized)) {\n            superCtor.finalize();\n        }\n        this[finalized] = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection and if one is pending connection the\n        // `_hasConnectionResolver` will exist. If so, resolve it to complete the\n        // update, otherwise requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `_getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super._getUpdateComplete()`, then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     *   class MyElement extends LitElement {\n     *     async _getUpdateComplete() {\n     *       await super._getUpdateComplete();\n     *       await this._myChild.updateComplete;\n     *     }\n     *   }\n     */\n    _getUpdateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement[_a] = true;\n//# sourceMappingURL=updating-element.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.2.1');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        // The Closure JS Compiler does not always preserve the correct \"this\"\n        // when calling static super methods (b/137460243), so explicitly bind.\n        super.finalize.call(this);\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\nLitElement['finalized'] = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","/******************************************************************************\r\n * Created 2008-08-19.\r\n *\r\n * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.\r\n *\r\n * Copyright (C) 2008\r\n *   Wyatt Baldwin <self@wyattbaldwin.com>\r\n *   All rights reserved\r\n *\r\n * Licensed under the MIT license.\r\n *\r\n *   http://www.opensource.org/licenses/mit-license.php\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *****************************************************************************/\r\nexport const dijkstra = {\r\n  single_source_shortest_paths: function(graph, s, d) {\r\n    // Predecessor map for each node that has been encountered.\r\n    // node ID => predecessor node ID\r\n    var predecessors = {};\r\n\r\n    // Costs of shortest paths from s to all nodes encountered.\r\n    // node ID => cost\r\n    var costs = {};\r\n    costs[s] = 0;\r\n\r\n    // Costs of shortest paths from s to all nodes encountered; differs from\r\n    // `costs` in that it provides easy access to the node that currently has\r\n    // the known shortest path from s.\r\n    // XXX: Do we actually need both `costs` and `open`?\r\n    var open = new BinaryHeap(function (x) { return x.cost; });\r\n    open.push({value: s, cost: 0});\r\n\r\n    var closest,\r\n        u,\r\n        cost_of_s_to_u,\r\n        adjacent_nodes,\r\n        cost_of_e,\r\n        cost_of_s_to_u_plus_cost_of_e,\r\n        cost_of_s_to_v,\r\n        first_visit;\r\n    while (open.size()) {\r\n      // In the nodes remaining in graph that have a known cost from s,\r\n      // find the node, u, that currently has the shortest path from s.\r\n      closest = open.pop();\r\n      u = closest.value;\r\n      cost_of_s_to_u = closest.cost;\r\n\r\n      // Get nodes adjacent to u...\r\n      adjacent_nodes = graph(u) || {};\r\n\r\n      // ...and explore the edges that connect u to those nodes, updating\r\n      // the cost of the shortest paths to any or all of those nodes as\r\n      // necessary. v is the node across the current edge from u.\r\n      for (var v in adjacent_nodes) {\r\n        // Get the cost of the edge running from u to v.\r\n        cost_of_e = adjacent_nodes[v];\r\n\r\n        // Cost of s to u plus the cost of u to v across e--this is *a*\r\n        // cost from s to v that may or may not be less than the current\r\n        // known cost to v.\r\n        cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;\r\n\r\n        // If we haven't visited v yet OR if the current known cost from s to\r\n        // v is greater than the new cost we just found (cost of s to u plus\r\n        // cost of u to v across e), update v's cost in the cost list and\r\n        // update v's predecessor in the predecessor list (it's now u).\r\n        cost_of_s_to_v = costs[v];\r\n        first_visit = (typeof costs[v] === 'undefined');\r\n        if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {\r\n          costs[v] = cost_of_s_to_u_plus_cost_of_e;\r\n          open.push({value: v, cost: cost_of_s_to_u_plus_cost_of_e});\r\n          predecessors[v] = u;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (typeof costs[d] === 'undefined') {\r\n      var msg = ['Could not find a path from ', s, ' to ', d, '.'].join('');\r\n      throw new Error(msg);\r\n    }\r\n\r\n    return predecessors;\r\n  },\r\n\r\n  extract_shortest_path_from_predecessor_list: function(predecessors, d) {\r\n    var nodes = [];\r\n    var u = d;\r\n    var predecessor;\r\n    while (u) {\r\n      nodes.push(u);\r\n      predecessor = predecessors[u];\r\n      u = predecessors[u];\r\n    }\r\n    nodes.reverse();\r\n    return nodes;\r\n  },\r\n\r\n  find_path: function(graph, s, d) {\r\n    var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);\r\n    return dijkstra.extract_shortest_path_from_predecessor_list(\r\n      predecessors, d);\r\n  },\r\n\r\n  // test: function() {\r\n  //   // A B C\r\n  //   // D E F\r\n  //   // G H I\r\n  //   graph = function (key) {\r\n  //     switch (key) {\r\n  //       case 'a': return {b: 10, d: 1};\r\n  //       case 'b': return {a: 1, c: 1, e: 1};\r\n  //       case 'c': return {b: 1, f: 1};\r\n  //       case 'd': return {a: 1, e: 1, g: 1};\r\n  //       case 'e': return {b: 1, d: 1, f: 1, h: 1};\r\n  //       case 'f': return {c: 1, e: 1, i: 1};\r\n  //       case 'g': return {d: 1, h: 1};\r\n  //       case 'h': return {e: 1, g: 1, i: 1};\r\n  //       case 'i': return {f: 1, h: 1};\r\n  //     }\r\n  //   };\r\n  //   var path = dijkstra.find_path(graph, 'a', 'i');\r\n  //   if (path.join() !== ['a', 'd', 'e', 'f', 'i'].join()) {\r\n  //     throw new Error('Path finding error!');\r\n  //   }\r\n  // }\r\n};\r\n\r\nfunction BinaryHeap(scoreFunction){\r\n  this.content = [];\r\n  this.scoreFunction = scoreFunction;\r\n}\r\n\r\nBinaryHeap.prototype = {\r\n  push: function(element) {\r\n    // Add the new element to the end of the array.\r\n    this.content.push(element);\r\n    // Allow it to bubble up.\r\n    this.bubbleUp(this.content.length - 1);\r\n  },\r\n\r\n  pop: function() {\r\n    // Store the first element so we can return it later.\r\n    var result = this.content[0];\r\n    // Get the element at the end of the array.\r\n    var end = this.content.pop();\r\n    // If there are any elements left, put the end element at the\r\n    // start, and let it sink down.\r\n    if (this.content.length > 0) {\r\n      this.content[0] = end;\r\n      this.sinkDown(0);\r\n    }\r\n    return result;\r\n  },\r\n\r\n  remove: function(node) {\r\n    var len = this.content.length;\r\n    // To remove a value, we must search through the array to find\r\n    // it.\r\n    for (var i = 0; i < len; i++) {\r\n      if (this.content[i] === node) {\r\n        // When it is found, the process seen in 'pop' is repeated\r\n        // to fill up the hole.\r\n        var end = this.content.pop();\r\n        if (i !== len - 1) {\r\n          this.content[i] = end;\r\n          if (this.scoreFunction(end) < this.scoreFunction(node))\r\n            this.bubbleUp(i);\r\n          else\r\n            this.sinkDown(i);\r\n        }\r\n        return;\r\n      }\r\n    }\r\n    throw new Error(\"Node not found.\");\r\n  },\r\n\r\n  size: function() {\r\n    return this.content.length;\r\n  },\r\n\r\n  bubbleUp: function(n) {\r\n    // Fetch the element that has to be moved.\r\n    var element = this.content[n];\r\n    // When at 0, an element can not go up any further.\r\n    while (n > 0) {\r\n      // Compute the parent element's index, and fetch it.\r\n      var parentN = Math.floor((n + 1) / 2) - 1,\r\n          parent = this.content[parentN];\r\n      // Swap the elements if the parent is greater.\r\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\r\n        this.content[parentN] = element;\r\n        this.content[n] = parent;\r\n        // Update 'n' to continue at the new position.\r\n        n = parentN;\r\n      }\r\n      // Found a parent that is less, no need to move it further.\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n  },\r\n\r\n  sinkDown: function(n) {\r\n    // Look up the target element and its score.\r\n    var length = this.content.length,\r\n        element = this.content[n],\r\n        elemScore = this.scoreFunction(element);\r\n\r\n    while(true) {\r\n      // Compute the indices of the child elements.\r\n      var child2N = (n + 1) * 2, child1N = child2N - 1;\r\n      // This is used to store the new position of the element,\r\n      // if any.\r\n      var swap = null;\r\n      // If the first child exists (is inside the array)...\r\n      if (child1N < length) {\r\n        // Look it up and compute its score.\r\n        var child1 = this.content[child1N],\r\n            child1Score = this.scoreFunction(child1);\r\n        // If the score is less than our element's, we need to swap.\r\n        if (child1Score < elemScore)\r\n          swap = child1N;\r\n      }\r\n      // Do the same checks for the other child.\r\n      if (child2N < length) {\r\n        var child2 = this.content[child2N],\r\n            child2Score = this.scoreFunction(child2);\r\n        if (child2Score < (swap === null ? elemScore : child1Score))\r\n          swap = child2N;\r\n      }\r\n\r\n      // If the element needs to be moved, swap it, and continue.\r\n      if (swap != null) {\r\n        this.content[n] = this.content[swap];\r\n        this.content[swap] = element;\r\n        n = swap;\r\n      }\r\n      // Otherwise, we are done.\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n};\r\n","if (Number.EPSILON === undefined) {\r\n  Number.EPSILON = Math.pow(2, -52);\r\n}\r\n\r\nexport function round(n) {\r\n  return Math.round(n * 100 + Number.EPSILON) / 100\r\n}\r\n\r\nexport function ratio(width, height) {\r\n  return round(width / height);\r\n}\r\n\r\nexport function scaleHeight(width, ratio) {\r\n  return round(width / ratio);\r\n}\r\n\r\nexport function scaleWidth(height, ratio) {\r\n  return round(height * ratio);\r\n}\r\n\r\nexport function debounce (fn, delay) {\r\n  let timeoutID = null\r\n  return function () {\r\n    clearTimeout(timeoutID)\r\n    const args = arguments\r\n    const that = this\r\n    timeoutID = setTimeout(function () {\r\n      fn.apply(that, args)\r\n    }, delay)\r\n  }\r\n}\r\n","import { dijkstra } from './dijkstra';\r\nimport { round, ratio, scaleHeight, scaleWidth } from '../common/utils';\r\n\r\nfunction getRowHeight(row, containerWidth, padding) {\r\n  const rowWidth = containerWidth - (row.length - 1) * (padding);\r\n  const rowAspectRatio = row.reduce((acc, { ratio }) => acc + ratio, 0);\r\n  return scaleHeight(rowWidth, rowAspectRatio);\r\n}\r\n\r\nfunction cost(images, start, end, containerWidth, targetHeight, padding) {\r\n  const row = images.slice(start, end);\r\n  const rowHeight = getRowHeight(row, containerWidth, padding);\r\n  return Math.pow(Math.abs(rowHeight - targetHeight), 2);\r\n}\r\n\r\nfunction calcSeekLimit(containerWidth, targetRowHeight) {\r\n  if (containerWidth < 420) {\r\n    // limit to two nodes if the container is narrow\r\n    return 2;\r\n  }\r\n\r\n  // find how many 3/4 portrait pictures will fit in an ideal row\r\n  const count = ratio(containerWidth, targetRowHeight) / 0.75;\r\n  return Math.round(count * 1.5);\r\n}\r\n\r\nexport default function({\r\n  images,\r\n  containerWidth,\r\n  targetHeight,\r\n  padding = 2,\r\n  seekLimit = calcSeekLimit,\r\n  byRow = false\r\n} = {}) {\r\n\r\n  // clone the images, and set ratio and initial scaled width / height\r\n  const _images = images.map((image, index) => {\r\n    return {\r\n      ...image,\r\n      index,\r\n      ratio: ratio(image.width, image.height)\r\n    }\r\n  });\r\n\r\n  const nodeSeekLimit = seekLimit(containerWidth, targetHeight);\r\n\r\n  const graph = start => {\r\n    const results = {};\r\n    start = +start;\r\n    results[start] = 0;\r\n    for (let i = start + 1; i < _images.length + 1; ++i) {\r\n      if (i - start > nodeSeekLimit) {\r\n        break;\r\n      }\r\n      results['' + i] = cost(_images, start, i, containerWidth, targetHeight, padding);\r\n    }\r\n    return results;\r\n  }\r\n\r\n  const path = dijkstra.find_path(graph, '0', _images.length);\r\n\r\n  const rows = [];\r\n  const scaledImages = [];\r\n  for (let i = 0; i < path.length; i++) {\r\n    if (path[i + 1]) {\r\n      const row = _images.slice(+path[i], +path[i + 1]);\r\n      const isLastRow = (i === path.length-2);\r\n\r\n      // scale row\r\n      const rowHeight = getRowHeight(row, containerWidth, padding);\r\n      row.forEach((image, index) => {\r\n        image.scaledWidth = scaleWidth(rowHeight, image.ratio); //.toFixed(1);\r\n        image.scaledHeight = rowHeight;\r\n        image.scaledWidthPc = round((image.scaledWidth / containerWidth) * 100);\r\n\r\n        if (index === row.length-1) {\r\n          image.isLastInRow = true;\r\n        }\r\n        image.isLastRow = isLastRow;\r\n\r\n        scaledImages.push(image);\r\n      });\r\n      rows.push(row);\r\n    }\r\n  }\r\n\r\n  if (byRow) {\r\n    return rows;\r\n  } else {\r\n    return scaledImages;\r\n  }\r\n}\r\n","function resizeListener(e) {\r\n  var win = e.target || e.srcElement\r\n  if (win.__resizeRAF__) {\r\n    cancelAnimationFrame(win.__resizeRAF__)\r\n  }\r\n  win.__resizeRAF__ = requestAnimationFrame(function () {\r\n    var trigger = win.__resizeTrigger__\r\n    var listeners = trigger &&  trigger.__resizeListeners__\r\n    if (listeners) {\r\n      listeners.forEach(function (fn) {\r\n        fn.call(trigger, e)\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\nvar exports = function exports(element, fn) {\r\n  var window = this\r\n  var document = window.document\r\n  var isIE\r\n\r\n  var attachEvent = document.attachEvent\r\n  if (typeof navigator !== 'undefined') {\r\n    isIE = navigator.userAgent.match(/Trident/) ||\r\n      navigator.userAgent.match(/Edge/)\r\n  }\r\n\r\n  function objectLoad() {\r\n    this.contentDocument.defaultView.__resizeTrigger__ = this.__resizeElement__\r\n    this.contentDocument.defaultView.addEventListener('resize', resizeListener)\r\n  }\r\n\r\n  if (!element.__resizeListeners__) {\r\n    element.__resizeListeners__ = []\r\n    if (attachEvent) {\r\n      element.__resizeTrigger__ = element\r\n      element.attachEvent('onresize', resizeListener)\r\n    } else {\r\n      if (getComputedStyle(element).position === 'static') {\r\n        element.style.position = 'relative'\r\n      }\r\n      var obj = (element.__resizeTrigger__ = document.createElement('object'))\r\n      obj.setAttribute(\r\n        'style',\r\n        'position: absolute; top: 0; left: 0; height: 100%; width: 100%; pointer-events: none; z-index: -1; opacity: 0;'\r\n      )\r\n      obj.setAttribute('class', 'resize-sensor')\r\n\r\n      // prevent <object> from stealing keyboard focus\r\n      obj.setAttribute('tabindex', '-1');\r\n\r\n      obj.__resizeElement__ = element\r\n      obj.onload = objectLoad\r\n      obj.type = 'text/html'\r\n      if (isIE) {\r\n        element.appendChild(obj)\r\n      }\r\n      obj.data = 'about:blank'\r\n      if (!isIE) {\r\n        element.appendChild(obj)\r\n      }\r\n    }\r\n  }\r\n  element.__resizeListeners__.push(fn)\r\n}\r\n\r\nmodule.exports = typeof window === 'undefined' ? exports : exports.bind(window)\r\n\r\nmodule.exports.unbind = function (element, fn) {\r\n  var attachEvent = document.attachEvent\r\n  var listeners = element.__resizeListeners__ || []\r\n  if (fn) {\r\n    var index = listeners.indexOf(fn)\r\n    if (index !== -1) {\r\n      listeners.splice(index, 1)\r\n    }\r\n  } else {\r\n    listeners = element.__resizeListeners__ = []\r\n  }\r\n  if (!listeners.length) {\r\n    if (attachEvent) {\r\n      element.detachEvent('onresize', resizeListener)\r\n    } else if (element.__resizeTrigger__) {\r\n      var contentDocument = element.__resizeTrigger__.contentDocument;\r\n      var defaultView = contentDocument && contentDocument.defaultView;\r\n      if (defaultView) {\r\n        defaultView.removeEventListener('resize', resizeListener);\r\n        delete defaultView.__resizeTrigger__;\r\n      }\r\n      element.__resizeTrigger__ = !element.removeChild(\r\n        element.__resizeTrigger__\r\n      )\r\n    }\r\n    delete element.__resizeListeners__\r\n  }\r\n}\r\n","import { LitElement, html, css, unsafeCSS } from 'lit-element';\r\nimport whenElementVisible from '../common/when-element-visible';\r\nimport styles from '../common/lazy-image.css';\r\n\r\nconst cache = {};\r\n\r\nclass LazyImage extends LitElement {\r\n  static get properties() {\r\n    return {\r\n      src: { type: String },\r\n      srcset: { type: String },\r\n      alt: { type: String },\r\n      isLoaded: { type: Boolean },\r\n      isVisible: { type: Boolean }\r\n    };\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.isVisible = false;\r\n    this.isLoaded = false;\r\n  }\r\n\r\n  static get styles() {\r\n    return css `\r\n      :host {\r\n        display: block;\r\n        width: 100%;\r\n        height: 100%;\r\n      }\r\n      ${unsafeCSS(styles)}\r\n    `;\r\n  }\r\n\r\n  onLoad() {\r\n    cache[this.src] = true;\r\n    this.isLoaded = true;\r\n  }\r\n\r\n  firstUpdated() {\r\n    if (cache[this.src]) {\r\n      this.isLoaded = true;\r\n      this.isVisible = true;\r\n    }\r\n\r\n    if (this.isLoaded) {\r\n      return;\r\n    }\r\n\r\n    this._observer_disconnect = whenElementVisible(this, () => {\r\n      this.isVisible = true;\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const srcset = this.srcset || '';\r\n    const alt = this.alt || '';\r\n    const img = html`\r\n      <img\r\n      class=\"lazy-image ${this.isLoaded ? 'is-loaded' : ''}\"=\r\n      src=\"${this.src}\"\r\n      srcset=\"${srcset}\"\r\n      alt=\"${alt}\"\r\n      @load=\"${this.onLoad}\"\r\n      />\r\n    `;\r\n\r\n    return html `\r\n      <div data-masonry-image class=\"lazy-image-container ${this.isLoaded ? 'is-loaded' : ''}\">\r\n        ${this.isVisible ? img : ''}\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this._observer_disconnect && this._observer_disconnect();\r\n    super.disconnectedCallback();\r\n  }\r\n}\r\n\r\ncustomElements.define('lazy-image', LazyImage);\r\n","export default function(element, cb, { delay = 300 } = {}) {\r\n  let isInitial = true;\r\n  let prevTime = 0;\r\n  let timeoutID = null;\r\n\r\n  const observer = new IntersectionObserver((entries, observer) => {\r\n    const { time, isIntersecting } = entries[0];\r\n\r\n    const callback = () => {\r\n      cb({\r\n        isVisibleOnInit: isInitial,\r\n        entry: entries[0]\r\n      });\r\n    }\r\n\r\n    if (isIntersecting) {\r\n      if (isInitial) {\r\n        observer.disconnect();\r\n        callback();\r\n      } else {\r\n        timeoutID = setTimeout(() => {\r\n          if (prevTime === time) {\r\n            observer.disconnect();\r\n            callback();\r\n          }\r\n        }, delay);\r\n      }\r\n    }\r\n\r\n    prevTime = time;\r\n    isInitial = false;\r\n  });\r\n\r\n  observer.observe(element);\r\n\r\n  return () => {\r\n    clearTimeout(timeoutID);\r\n    observer.disconnect();\r\n  }\r\n}\r\n","import { LitElement, html, css, unsafeCSS } from 'lit-element';\r\nimport createLayout from '../common/justified-layout';\r\nimport elementResizeEvent, { unbind } from 'element-resize-event';\r\nimport { debounce } from '../common/utils';\r\nimport './lazy-image';\r\nimport styles from '../common/style.css';\r\n\r\nclass ImageMasonry extends LitElement {\r\n  static get properties() {\r\n    return {\r\n      images: { type: Array },\r\n      scaledImages: { type: Array },\r\n      width: { type: Number },\r\n      padding: { type: Number },\r\n      targetRowHeight: { type: Number },\r\n      imageTemplate: { type: Function },\r\n      imageStyle: { type: String },\r\n      isResizing: { type: Boolean }\r\n    };\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this.scaledImages = [];\r\n    this.width = 0;\r\n    this.targetRowHeight = 220;\r\n    this.padding = 4;\r\n    this.isResizing = false;\r\n  }\r\n\r\n  static get styles() {\r\n    return css `\r\n      :host {\r\n        display: block;\r\n      }\r\n      ${unsafeCSS(styles)}\r\n    `;\r\n  }\r\n\r\n  firstUpdated() {\r\n    const process = () => {\r\n      this.width = this.getBoundingClientRect().width;\r\n      this.scaledImages = createLayout({\r\n        images: this.images,\r\n        containerWidth: this.width,\r\n        targetHeight: this.targetRowHeight,\r\n        padding: this.padding\r\n      });\r\n    }\r\n    const el = this.shadowRoot.querySelector('[data-resizer]');\r\n    const resizedFinished = debounce(() => {\r\n      this.isResizing = false;\r\n    }, 100);\r\n    elementResizeEvent(el, () => {\r\n      if (Math.round(this.width) !== Math.round(el.getBoundingClientRect().width)) {\r\n        this.isResizing = true;\r\n        process();\r\n        resizedFinished();\r\n      }\r\n    });\r\n    process();\r\n  }\r\n\r\n  updated(changedProperties) {\r\n    if (changedProperties.get('images') || changedProperties.get('targetRowHeight')) {\r\n      this.scaledImages = createLayout({\r\n        images: this.images,\r\n        containerWidth: this.width,\r\n        targetHeight: this.targetRowHeight,\r\n        padding: this.padding\r\n      });\r\n    }\r\n  }\r\n\r\n  makeStyle({ scaledWidth, scaledHeight, isLastRow, isLastInRow }) {\r\n    let mr = this.padding + 'px';\r\n    const mb = isLastRow ? '0' : mr;\r\n    let flex = `0 0 ${scaledWidth}px`;\r\n    if (isLastInRow) {\r\n      mr = '0';\r\n      flex = `1 1 ${scaledWidth-4}px`;\r\n    }\r\n    return `height:${scaledHeight}px; flex: ${flex}; margin-right:${mr}; margin-bottom: ${mb}`;\r\n  }\r\n\r\n  handleClick(index, event) {\r\n    const e = new CustomEvent('image-click', {\r\n      detail: {\r\n        index,\r\n        event,\r\n        image: this.images[index]\r\n      }\r\n    });\r\n    this.dispatchEvent(e);\r\n  }\r\n\r\n  render() {\r\n    const containerStyle = `width: ${this.width}px`;\r\n\r\n    return html `\r\n      ${this.imageStyle ?  html`<style>${this.imageStyle}</style>` : ''}\r\n      <div class=\"image-masonry ${this.isResizing ? 'is-resizing' : ''}\">\r\n        <div data-resizer></div>\r\n        <div class=\"image-masonry-container\" style=\"${containerStyle}\">\r\n        ${this.scaledImages.map(image => html`\r\n          <div class=\"masonry-item\" style=\"${this.makeStyle(image)}\" @click=\"${e => this.handleClick(image.index, e)}\">\r\n            <lazy-image .src=\"${image.src}\" .srcset=\"${image.srcset}\" .alt=\"${image.alt}\"></lazy-image>\r\n            ${this.imageTemplate && this.imageTemplate(image)}\r\n          </div>\r\n        `)}\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    const el = this.shadowRoot.querySelector('.image-masonry');\r\n    if (el) {\r\n      unbind(el);\r\n    }\r\n    super.disconnectedCallback();\r\n  }\r\n}\r\n\r\ncustomElements.define('image-masonry', ImageMasonry);\r\n","export default [{\r\n  src: 'images/a-small.jpg',\r\n  width: 400,\r\n  height: 300\r\n},\r\n{\r\n  src: 'images/b-small.jpg',\r\n  width: 400,\r\n  height: 300\r\n},\r\n{\r\n  src: 'images/c-small.jpg',\r\n  width: 300,\r\n  height: 400\r\n},\r\n{\r\n  src: 'images/d-small.jpg',\r\n  width: 300,\r\n  height: 400\r\n},\r\n{\r\n  src: 'images/e-small.jpg',\r\n  width: 300,\r\n  height: 400\r\n},\r\n{\r\n  src: 'images/f-small.jpg',\r\n  width: 400,\r\n  height: 300\r\n},\r\n{\r\n  src: 'images/g-small.jpg',\r\n  width: 400,\r\n  height: 300\r\n},\r\n{\r\n  src: 'images/h-small.jpg',\r\n  width: 300,\r\n  height: 400\r\n},\r\n{\r\n  src: 'images/i-small.jpg',\r\n  width: 300,\r\n  height: 400\r\n},\r\n{\r\n  src: 'images/j-small.jpg',\r\n  width: 833,\r\n  height: 250\r\n},\r\n{\r\n  src: 'images/k-small.jpg',\r\n  width: 400,\r\n  height: 300\r\n},\r\n{\r\n  src: 'images/l-small.jpg',\r\n  width: 300,\r\n  height: 400\r\n},\r\n{\r\n  src: 'images/m-small.jpg',\r\n  width: 400,\r\n  height: 300\r\n},\r\n{\r\n  src: 'images/n-small.jpg',\r\n  width: 400,\r\n  height: 300\r\n},\r\n{\r\n  src: 'images/o-small.jpg',\r\n  width: 400,\r\n  height: 300\r\n},\r\n{\r\n  src: 'images/p-small.jpg',\r\n  width: 300,\r\n  height: 400\r\n},\r\n{\r\n  src: 'images/q-small.jpg',\r\n  width: 400,\r\n  height: 300\r\n},\r\n{\r\n  src: 'images/r-small.jpg',\r\n  width: 400,\r\n  height: 300\r\n},\r\n{\r\n  src: 'images/s-small.jpg',\r\n  width: 400,\r\n  height: 200\r\n},\r\n{\r\n  src: 'images/t-small.jpg',\r\n  width: 400,\r\n  height: 300\r\n},\r\n{\r\n  src: 'images/u-small.jpg',\r\n  width: 400,\r\n  height: 300\r\n},\r\n{\r\n  src: 'images/v-small.jpg',\r\n  width: 400,\r\n  height: 300\r\n},\r\n{\r\n  src: 'images/w-small.jpg',\r\n  width: 300,\r\n  height: 400\r\n},\r\n{\r\n  src: 'images/x-small.jpg',\r\n  width: 833,\r\n  height: 250\r\n},\r\n{\r\n  src: 'images/y-small.jpg',\r\n  width: 400,\r\n  height: 300\r\n},\r\n{\r\n  src: 'images/z-small.jpg',\r\n  width: 300,\r\n  height: 400\r\n},\r\n{\r\n  src: 'images/zz-small.jpg',\r\n  width: 400,\r\n  height: 300\r\n}];\r\n","import { LitElement, html } from 'lit-element';\r\nimport '../../../src/litelement/image-masonry';\r\nimport sampleImages from '../images';\r\n\r\nclass ImageMasonryExample extends LitElement {\r\n  static get properties() {\r\n    return {\r\n      images: { type: Array }\r\n    };\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this.images = sampleImages;\r\n  }\r\n\r\n  render() {\r\n    return html `\r\n      <image-masonry .images=${this.images}></image-masonry>\r\n    `;\r\n  }\r\n}\r\n\r\ncustomElements.define('image-masonry-example', ImageMasonryExample);\r\n"],"names":["directives","WeakMap","isDirective","o","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","removeNodes","container","start","end","n","nextSibling","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","[object Object]","result","element","this","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","length","node","nextNode","nodeType","hasAttributes","attributes","count","i","endsWith","name","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","s","createMarker","match","createTextNode","insertBefore","previousSibling","pop","str","suffix","isTemplatePartActive","part","createComment","TemplateInstance","template","processor","options","__parts","setValue","commit","fragment","cloneNode","importNode","nodeIndex","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","commentMarker","TemplateResult","l","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","isPrimitive","value","isIterable","Array","isArray","Symbol","iterator","AttributeCommitter","dirty","_createPart","AttributePart","text","v","t","setAttribute","_getValue","committer","directive","NodePart","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","call","defaultTemplateProcessor","prefix","templateCache","templateCaches","get","stringsArray","keyString","Map","set","key","join","getTemplateElement","walkerNodeFilter","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","startIndex","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","templateElement","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","querySelector","nativeShadow","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","Boolean","Object","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","STATE_HAS_CONNECTED","finalized","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","observedAttributes","finalize","_classProperties","p","attr","_attributeNameForProperty","_attributeToPropertyMap","hasOwnProperty","superProperties","getPrototypeOf","k","_ensureClassProperties","noAccessor","prototype","defineProperty","oldValue","_requestUpdate","configurable","enumerable","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","reject","previousUpdatePromise","res","rej","_hasConnected","performUpdate","hasUpdated","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","_getUpdateComplete","size","_propertyToAttribute","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","styleSheet","_styleSheet","replaceSync","unsafeCSS","css","reduce","acc","idx","textFromCSSResult","flattenStyles","flat","Infinity","arrayFlat","LitElement","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","adoptedStyleSheets","map","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","connectedCallback","styleElement","templateResult","render","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","assign","appendInto","litRender","delete","dijkstra","single_source_shortest_paths","graph","d","predecessors","costs","closest","u","cost_of_s_to_u","adjacent_nodes","cost_of_s_to_u_plus_cost_of_e","cost_of_s_to_v","open","BinaryHeap","x","cost","msg","extract_shortest_path_from_predecessor_list","nodes","reverse","find_path","scoreFunction","round","EPSILON","ratio","width","height","scaleWidth","getRowHeight","row","containerWidth","padding","scaleHeight","images","targetHeight","rowHeight","pow","abs","calcSeekLimit","targetRowHeight","seekLimit","byRow","_images","image","nodeSeekLimit","path","results","rows","scaledImages","isLastRow","scaledWidth","scaledHeight","scaledWidthPc","isLastInRow","resizeListener","win","target","srcElement","__resizeRAF__","cancelAnimationFrame","requestAnimationFrame","trigger","__resizeTrigger__","listeners","__resizeListeners__","fn","bubbleUp","sinkDown","remove","len","parentN","floor","elemScore","child2N","child1N","swap","child1","child1Score","child2","exports","isIE","attachEvent","navigator","userAgent","getComputedStyle","position","obj","__resizeElement__","onload","contentDocument","defaultView","bind","splice","detachEvent","cache","define","src","srcset","alt","isLoaded","isVisible","_observer_disconnect","cb","delay","isInitial","prevTime","timeoutID","observer","IntersectionObserver","entries","time","isIntersecting","callback","isVisibleOnInit","entry","disconnect","setTimeout","observe","clearTimeout","whenElementVisible","img","onLoad","disconnectedCallback","imageTemplate","Function","imageStyle","isResizing","process","getBoundingClientRect","createLayout","el","shadowRoot","resizedFinished","args","arguments","that","apply","debounce","elementResizeEvent","mr","mb","flex","CustomEvent","detail","dispatchEvent","containerStyle","makeStyle","handleClick","unbind","sampleImages"],"mappings":"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"}